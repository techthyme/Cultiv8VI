
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Person {
  id         String   @id @default(cuid())
  email      String   @unique
  phone      String?
  name       String
  full_name  String?
  created_at DateTime @default(now())
  
  // NextAuth fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Farm relationship
  farms Farm[]

  @@map("users") // NextAuth expects "users" table name
}

// Alias for NextAuth compatibility
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  phone      String?
  name       String
  full_name  String?
  created_at DateTime @default(now())
  
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  farms Farm[]

  @@map("persons")
}

model Location {
  id          String  @id @default(cuid())
  street      String?
  town        String?
  city        String?
  state       String?
  postal_code String?
  lat         Float?
  lng         Float?
  
  farms Farm[]
}

model Farm {
  id          String   @id @default(cuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  
  // Relationships
  owner_id    String
  owner       Person   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  
  location_id String?
  location    Location? @relation(fields: [location_id], references: [id])
  
  products    Product[]
}

enum ProductCategory {
  VEGETABLES
  FRUITS
  HERBS
  GRAINS
  DAIRY
  MEAT
  POULTRY
  SEAFOOD
  PROCESSED
  OTHER
}

enum UnitType {
  LB
  KG
  OUNCE
  GRAM
  BUNCH
  DOZEN
  PIECE
  GALLON
  LITER
  QUART
  CUP
  BAG
  BOX
  BASKET
}

model Product {
  id                 String          @id @default(cuid())
  name               String
  description        String?
  category           ProductCategory
  price_per_unit     Float
  unit_type          UnitType
  available_quantity Int
  harvest_date       DateTime?
  images             String? // JSON array stored as string
  is_organic         Boolean         @default(false)
  is_active          Boolean         @default(true)
  created_at         DateTime        @default(now())
  
  // Relationships
  farm_id String
  farm    Farm   @relation(fields: [farm_id], references: [id], onDelete: Cascade)
}
